from PIL import Image
from pathlib import Path
# Code generated by Gemini, edited by me

def process_folder(file_name, img_id, layers, current_folder, output_path, idx):
    if file_name.startswith('sd'):
        file_name = file_name[:-1]
    base_image_path = f"{file_name}{img_id}.png"
    layer_paths = [f"{base_image_path[:-4]}_{str(layer_no+1)}_{layer}.png" for layer_no, layer in enumerate(layers) if layer]

    # Check if base image and layers exist
    base_image_path = current_folder / base_image_path
    layer_paths = [current_folder / layer_path for layer_path in layer_paths]
    if not all(path.exists() for path in [base_image_path] + layer_paths):
        print(f"Missing files for {str(base_image_path)}")
        return

    # Load images
    base_image = Image.open(base_image_path)
    layer_images = [Image.open(layer_path) for layer_path in layer_paths]

    # Compose images (adjust as needed, e.g., using alpha blending)
    for layer_image in layer_images:
        base_image.paste(layer_image, (0, 0), layer_image)

    # Save the composed image
    output_file = output_path / f"{file_name}_{idx:02}.png"
    base_image.save(output_file)

def process_file(file_path):
    with open(file_path, 'r') as f:
        lines = list(filter(None,f.read().splitlines()))

    current_folder = None
    input_folder = Path(file_path).resolve().parent
    output_path = input_folder / "output"
    output_path.mkdir(parents=True, exist_ok=True)
    idx = 0
    for line in lines[1:]:  # Skip the first comment line
        if line.startswith('['):
            current_folder = line.strip()[1:-1]
            idx = 0
        else:
            idx += 1
            file_name, img_id, *layers = line.strip().split(',')
            if Path(f"{current_folder}l").exists():
                process_folder(f"{file_name}l", img_id, layers, input_folder / f"{current_folder}l", output_path, idx)
            if Path(current_folder).exists():
                process_folder(file_name, img_id, layers, input_folder / current_folder, output_path, idx)
            

file_path = "cglist.lst"
process_file(file_path)